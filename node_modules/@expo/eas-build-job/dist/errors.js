"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownGradleError = exports.YarnLockChecksumError = exports.YarnMultipleInstancesError = exports.IncompatiblePodsGenericWorkflowError = exports.IncompatiblePodsManagedWorkflowError = exports.UnknownFastlaneError = exports.MissingGoogleServicesPlist = exports.MissingGoogleServicesJson = exports.UnsupportedBundlerVersion = exports.UnsupportedCocoaPodsVersion = exports.InvalidKeystoreAliasError = exports.InvalidKeystoreFormatError = exports.SystemDepsInstallError = exports.CredentialsDistCertMismatchError = exports.BuildTimeout = exports.ServerError = exports.UnknownError = exports.UserError = exports.ErrorCode = void 0;
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["UKNOWN_ERROR"] = "UNKNOWN_ERROR";
    ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
    ErrorCode["CREDENTIALS_DIST_CERT_MISMATCH"] = "EAS_BUILD_CREDENTIALS_DIST_CERT_MISMATCH";
    ErrorCode["SYSTEM_DEPS_INSTALL_ERROR"] = "EAS_BUILD_SYSTEM_DEPS_INSTALL_ERROR";
    ErrorCode["UNSUPPORTED_COCOAPODS_VERSION_ERROR"] = "EAS_BUILD_UNSUPPORTED_COCOAPODS_VERSION_ERROR";
    ErrorCode["UNSUPPORTED_BUNDLER_VERSION_ERROR"] = "EAS_BUILD_UNSUPPORTED_BUNDLER_VERSION_ERROR";
    ErrorCode["INVALID_KEYSTORE_FORMAT_ERROR"] = "EAS_BUILD_INVALID_KEYSTORE_FORMAT_ERROR";
    ErrorCode["INVALID_KEYSTORE_ALIAS_ERROR"] = "EAS_BUILD_INVALID_KEYSTORE_ALIAS_ERROR";
    ErrorCode["MISSING_GOOGLE_SERVICES_JSON_ERROR"] = "EAS_BUILD_MISSING_GOOGLE_SERVICES_JSON_ERROR";
    ErrorCode["MISSING_GOOGLE_SERVICES_PLIST_ERROR"] = "EAS_BUILD_MISSING_GOOGLE_SERVICES_PLIST_ERROR";
    ErrorCode["INCOMPATIBLE_PODS_MANAGED_WORKFLOW_ERROR"] = "EAS_BUILD_INCOMPATIBLE_PODS_MANAGED_WORKFLOW_ERROR";
    ErrorCode["INCOMPATIBLE_PODS_GENERIC_WORKFLOW_ERROR"] = "EAS_BUILD_INCOMPATIBLE_PODS_GENERIC_WORKFLOW_ERROR";
    ErrorCode["YARN_LOCK_CHECKSUM_ERROR"] = "EAS_BUILD_YARN_LOCK_CHECKSUM_ERROR";
    ErrorCode["YARN_MULTIPLE_INSTANCES_ERROR"] = "EAS_BUILD_YARN_MULTIPLE_INSTANCES_ERROR";
    ErrorCode["NPM_PACKAGE_CORRUPTED_ERROR"] = "EAS_BUILD_NPM_PACKAGE_CORRUPTED_ERROR";
    ErrorCode["UNKNOWN_FASTLANE_ERROR"] = "EAS_BUILD_UNKNOWN_FASTLANE_ERROR";
    ErrorCode["UNKNOWN_GRADLE_ERROR"] = "EAS_BUILD_UNKNOWN_GRADLE_ERROR";
    ErrorCode["BUILD_TIMEOUT_ERROR"] = "EAS_BUILD_TIMEOUT_ERROR";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
class UserError extends Error {
    format() {
        return {
            errorCode: this.errorCode,
            message: this.message,
            docsUrl: this.docsUrl,
        };
    }
}
exports.UserError = UserError;
class UnknownError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.UKNOWN_ERROR;
        this.message = 'Unknown error. See logs for more information.';
    }
}
exports.UnknownError = UnknownError;
class ServerError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.SERVER_ERROR;
        this.message = 'Internal Server Error.\nTry again later. If the problem persists, report the issue.';
    }
}
exports.ServerError = ServerError;
class BuildTimeout extends ServerError {
    constructor(maxBuildTimeMs) {
        super();
        this.message = `Your build exceeded the maximum build time of ${maxBuildTimeMs / (60 * 1000)} minutes.`;
    }
}
exports.BuildTimeout = BuildTimeout;
class CredentialsDistCertMismatchError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.CREDENTIALS_DIST_CERT_MISMATCH;
        this.message = "Provisioning profile and distribution certificate don't match.";
    }
}
exports.CredentialsDistCertMismatchError = CredentialsDistCertMismatchError;
class SystemDepsInstallError extends UserError {
    constructor(dependency) {
        super();
        this.errorCode = ErrorCode.SYSTEM_DEPS_INSTALL_ERROR;
        this.message = `Failed to install ${dependency}. Make sure you specified the correct version in eas.json.`;
    }
}
exports.SystemDepsInstallError = SystemDepsInstallError;
class InvalidKeystoreFormatError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.INVALID_KEYSTORE_FORMAT_ERROR;
        this.message = 'The keystore used in this build is malformed or it has an unsupported type. Make sure you provided the correct file.';
    }
}
exports.InvalidKeystoreFormatError = InvalidKeystoreFormatError;
class InvalidKeystoreAliasError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.INVALID_KEYSTORE_FORMAT_ERROR;
        this.message = 'The alias specified for this keystore does not exist. Make sure you specified the correct value.';
    }
}
exports.InvalidKeystoreAliasError = InvalidKeystoreAliasError;
class UnsupportedCocoaPodsVersion extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.UNSUPPORTED_COCOAPODS_VERSION_ERROR;
        this.message = `Your project requires a newer version of CocoaPods. You can update it in the build profile in eas.json by either:
- changing the current version under key "cocoapods"
- switching to an image that supports that version under key "image"`;
        this.docsUrl = 'https://docs.expo.dev/build-reference/eas-json/';
    }
}
exports.UnsupportedCocoaPodsVersion = UnsupportedCocoaPodsVersion;
class UnsupportedBundlerVersion extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.UNSUPPORTED_BUNDLER_VERSION_ERROR;
        this.message = `Your project requires a different version of the Ruby "bundler" program than the version installed in this EAS Build environment. You can specify which version of "bundler" to install by specifying the version under "build"→[buildProfileName]→"ios"→"bundler" in eas.json.`;
        this.docsUrl = 'https://docs.expo.dev/build-reference/eas-json/';
    }
}
exports.UnsupportedBundlerVersion = UnsupportedBundlerVersion;
class MissingGoogleServicesJson extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.MISSING_GOOGLE_SERVICES_JSON_ERROR;
        this.message = '"google-services.json" is missing, make sure that file exists. Remember that EAS Build only uploads the files tracked by git.';
    }
}
exports.MissingGoogleServicesJson = MissingGoogleServicesJson;
class MissingGoogleServicesPlist extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.MISSING_GOOGLE_SERVICES_PLIST_ERROR;
        this.message = '"GoogleService-Info.plist" is missing, make sure that file exists. Remember that EAS Build only uploads the files tracked by git.';
    }
}
exports.MissingGoogleServicesPlist = MissingGoogleServicesPlist;
class UnknownFastlaneError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.UNKNOWN_FASTLANE_ERROR;
        this.message = `Fastlane build failed with unknown error. See logs for the "Run fastlane" and "Xcode Logs" phases for more information.
Fastlane errors in most cases are not printed at the end of the output, so you may not find any useful information in the last lines of output when looking for an error message.`;
    }
}
exports.UnknownFastlaneError = UnknownFastlaneError;
class IncompatiblePodsManagedWorkflowError extends UserError {
    constructor(usingDefaultCacheConfig) {
        super();
        this.errorCode = ErrorCode.INCOMPATIBLE_PODS_MANAGED_WORKFLOW_ERROR;
        this.message = `Compatible versions of some pods could not be resolved.
You are seeing this error because either:
  - Versions in the Podfile.lock cached by EAS do not match required values for some of the libraries, it can be triggered when upgrading Expo SDK or any other library with native code. To fix that ${usingDefaultCacheConfig
            ? 'add the "cache.key" field (it can be set to any value) in the build profile in eas.json to invalidate the cache.'
            : 'update value of the "cache.key" field in the build profile in eas.json to invalidate the cache.'}
  - Some of your npm packages have native code that depend on different versions of the same pod. See logs for more information.
`;
    }
}
exports.IncompatiblePodsManagedWorkflowError = IncompatiblePodsManagedWorkflowError;
class IncompatiblePodsGenericWorkflowError extends UserError {
    constructor(usingDefaultCacheConfig) {
        super();
        this.errorCode = ErrorCode.INCOMPATIBLE_PODS_GENERIC_WORKFLOW_ERROR;
        this.message = `Compatible versions of some pods could not be resolved.
You are seeing this error because either:
  - Versions in the Podfile.lock cached by EAS do not match required values in Podspecs of some of the libraries. To fix that ${usingDefaultCacheConfig
            ? 'add the "cache.key" field (it can be set to any value) in the build profile in eas.json to invalidate the cache.'
            : 'update value of the "cache.key" field in the build profile in eas.json to invalidate the cache.'}
  - Some of the pods used in your project depend on different versions of the same pod. See logs for more information.
`;
    }
}
exports.IncompatiblePodsGenericWorkflowError = IncompatiblePodsGenericWorkflowError;
class YarnMultipleInstancesError extends UserError {
    constructor() {
        super();
        this.errorCode = ErrorCode.YARN_MULTIPLE_INSTANCES_ERROR;
        this.message = `One of project dependencies is starting new install process while the main one is still in progress, which might result in corrupted packages. Most likely the reason for error is "prepare" script in git-referenced dependency of your project. Learn more: https://github.com/yarnpkg/yarn/issues/7212#issuecomment-493720324`;
    }
}
exports.YarnMultipleInstancesError = YarnMultipleInstancesError;
class YarnLockChecksumError extends UserError {
    constructor(packageName) {
        super();
        this.errorCode = ErrorCode.YARN_LOCK_CHECKSUM_ERROR;
        this.message = `Checksum for package "${packageName}" does not match value in registry. To fix that:
- run "yarn cache clean"
- remove yarn.lock (or only the section for that package)
- run "yarn install --force"`;
    }
}
exports.YarnLockChecksumError = YarnLockChecksumError;
class UnknownGradleError extends UserError {
    constructor() {
        super(...arguments);
        this.errorCode = ErrorCode.UNKNOWN_GRADLE_ERROR;
        this.message = 'Gradle build failed with unknown error. See logs for the "Run gradlew" phase for more information.';
    }
}
exports.UnknownGradleError = UnknownGradleError;
//# sourceMappingURL=errors.js.map