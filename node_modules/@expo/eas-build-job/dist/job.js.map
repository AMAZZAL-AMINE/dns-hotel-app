{"version":3,"file":"job.js","sourceRoot":"","sources":["../src/job.ts"],"names":[],"mappings":"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","sourcesContent":["import Joi from 'joi';\nimport semver from 'semver';\n\nimport { Platform, Workflow } from './common';\nimport * as Android from './android';\nimport * as Ios from './ios';\n\nexport type Job = Android.Job | Ios.Job;\n\nexport const JobSchema = Joi.object<Job>({\n  platform: Joi.string()\n    .valid(...Object.values(Platform))\n    .required(),\n})\n  .when(Joi.object({ platform: Platform.ANDROID }).unknown(), { then: Android.JobSchema })\n  .when(Joi.object({ platform: Platform.IOS }).unknown(), { then: Ios.JobSchema });\n\nexport function sanitizeJob(\n  rawJob: object,\n  { sdkVersion, reactNativeVersion }: { reactNativeVersion?: string; sdkVersion?: string } = {}\n): Job {\n  const { value, error } = JobSchema.validate(rawJob, {\n    stripUnknown: true,\n    convert: true,\n    abortEarly: false,\n  });\n\n  const job: Job = value;\n  if (job.platform === Platform.IOS) {\n    setIosBuilderImageForManagedJob(job, sdkVersion);\n  } else if (job.platform === Platform.ANDROID) {\n    setAndroidBuilderImage(job, sdkVersion, reactNativeVersion);\n  }\n\n  if (error) {\n    throw error;\n  } else {\n    return job;\n  }\n}\n\nexport function setAndroidBuilderImage(\n  job: Job,\n  sdkVersion?: string,\n  reactNativeVersion?: string\n): void {\n  if (job.builderEnvironment?.image || !reactNativeVersion || !sdkVersion) {\n    return;\n  }\n\n  for (const rule of Android.reactNativeImageMatchRules) {\n    if (\n      semver.satisfies(reactNativeVersion, rule.reactNativeSemverRange) &&\n      semver.satisfies(sdkVersion, rule.sdkSemverRange)\n    ) {\n      job.builderEnvironment = {\n        image: rule.image,\n        ...job.builderEnvironment,\n      };\n      return;\n    }\n  }\n}\n\nexport function setIosBuilderImageForManagedJob(job: Job, sdkVersion?: string): void {\n  if (job.type !== Workflow.MANAGED || job.builderEnvironment?.image || !sdkVersion) {\n    return;\n  }\n\n  const ranges = Object.keys(Ios.sdkVersionToDefaultBuilderImage);\n  const matchingRange = ranges.find((range) => semver.satisfies(sdkVersion, range));\n  if (!matchingRange) {\n    return;\n  }\n  const image = Ios.sdkVersionToDefaultBuilderImage[matchingRange];\n  job.builderEnvironment = {\n    image,\n    ...job.builderEnvironment,\n  };\n}\n"]}