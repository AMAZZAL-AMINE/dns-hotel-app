/// <reference types="node" />
import { URL } from 'url';
import { Definition, OptionFlag, BooleanFlag, Default } from '../interfaces';
export declare function build<T>(defaults: {
    parse: OptionFlag<T>['parse'];
} & Partial<OptionFlag<T>>): Definition<T>;
export declare function build(defaults: Partial<OptionFlag<string>>): Definition<string>;
export declare function boolean<T = boolean>(options?: Partial<BooleanFlag<T>>): BooleanFlag<T>;
export declare function integer(opts: Partial<OptionFlag<number>> & {
    min?: number;
    max?: number;
} & ({
    required: true;
} | {
    default: Default<number>;
})): OptionFlag<number>;
export declare function integer(opts?: Partial<OptionFlag<number>> & {
    min?: number;
    max?: number;
}): OptionFlag<number | undefined>;
export declare function directory(opts: {
    exists?: boolean;
} & Partial<OptionFlag<string>> & ({
    required: true;
} | {
    default: Default<string>;
})): OptionFlag<string>;
export declare function directory(opts?: {
    exists?: boolean;
} & Partial<OptionFlag<string>>): OptionFlag<string | undefined>;
export declare function file(opts: {
    exists?: boolean;
} & Partial<OptionFlag<string>> & ({
    required: true;
} | {
    default: string;
})): OptionFlag<string>;
export declare function file(opts?: {
    exists?: boolean;
} & Partial<OptionFlag<string>>): OptionFlag<string | undefined>;
/**
 * Initializes a string as a URL. Throws an error
 * if the string is not a valid URL.
 */
export declare const url: Definition<URL>;
export declare function option<T>(options: {
    parse: OptionFlag<T>['parse'];
} & Partial<OptionFlag<T>>): OptionFlag<T | undefined>;
declare const stringFlag: Definition<string>;
export { stringFlag as string };
export declare const defaultFlags: {
    color: BooleanFlag<boolean>;
};
