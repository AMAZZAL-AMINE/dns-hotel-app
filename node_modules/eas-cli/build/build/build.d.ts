import { ArchiveSource, Job, Metadata, Platform } from '@expo/eas-build-job';
import { CredentialsSource } from '@expo/eas-json';
import { BuildFragment, BuildParamsInput } from '../graphql/generated';
import { BuildResult } from '../graphql/mutations/BuildMutation';
import { BuildContext } from './context';
export interface CredentialsResult<Credentials> {
    source: CredentialsSource.LOCAL | CredentialsSource.REMOTE;
    credentials: Credentials;
}
export interface JobData<Credentials> {
    credentials?: Credentials;
    projectArchive: ArchiveSource;
}
interface Builder<TPlatform extends Platform, Credentials, TJob extends Job> {
    ctx: BuildContext<TPlatform>;
    ensureCredentialsAsync(ctx: BuildContext<TPlatform>): Promise<CredentialsResult<Credentials> | undefined>;
    syncProjectConfigurationAsync(ctx: BuildContext<TPlatform>): Promise<void>;
    prepareJobAsync(ctx: BuildContext<TPlatform>, jobData: JobData<Credentials>): Promise<Job>;
    sendBuildRequestAsync(appId: string, job: TJob, metadata: Metadata, buildParams: BuildParamsInput): Promise<BuildResult>;
}
export declare type BuildRequestSender = () => Promise<BuildFragment | undefined>;
export declare function prepareBuildRequestForPlatformAsync<TPlatform extends Platform, Credentials, TJob extends Job>(builder: Builder<TPlatform, Credentials, TJob>): Promise<BuildRequestSender>;
declare type MaybeBuildFragment = BuildFragment | null;
export declare function waitForBuildEndAsync({ buildIds, accountName }: {
    buildIds: string[];
    accountName: string;
}, { intervalSec }?: {
    intervalSec?: number | undefined;
}): Promise<MaybeBuildFragment[]>;
export {};
