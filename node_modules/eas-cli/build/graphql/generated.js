"use strict";
/**
 * This file was generated using GraphQL Codegen
 * Command: yarn generate-graphql-code
 * Run this during development for automatic type generation when editing GraphQL documents
 * For more info and docs, visit https://graphql-code-generator.com/
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageMetricsGranularity = exports.UsageMetricType = exports.UploadSessionType = exports.SubmissionStatus = exports.SubmissionAndroidTrack = exports.SubmissionAndroidReleaseStatus = exports.SubmissionAndroidArchiveType = exports.StatuspageServiceStatus = exports.StatuspageServiceName = exports.StatuspageIncidentStatus = exports.StatuspageIncidentImpact = exports.StandardOffer = exports.SecondFactorMethod = exports.Role = exports.ProjectArchiveSourceType = exports.Permission = exports.Order = exports.OfferType = exports.MailchimpTag = exports.MailchimpAudience = exports.IosSchemeBuildConfiguration = exports.IosManagedBuildType = exports.IosDistributionType = exports.IosBuildType = exports.InvoiceDiscountType = exports.Feature = exports.EasServiceMetric = exports.EasBuildDeprecationInfoType = exports.DistributionType = exports.CacheControlScope = exports.BuildWorkflow = exports.BuildStatus = exports.BuildResourceClass = exports.BuildPriority = exports.BuildJobStatus = exports.BuildJobLogsFormat = exports.BuildIosEnterpriseProvisioning = exports.BuildCredentialsSource = exports.AuthProtocolType = exports.AssetMetadataStatus = exports.AppsFilter = exports.AppleDeviceClass = exports.AppStoreConnectUserRole = exports.AppSort = exports.AppPrivacy = exports.AppPlatform = exports.AndroidKeystoreType = exports.AndroidFcmVersion = exports.AndroidBuildType = exports.ActivityTimelineProjectActivityType = void 0;
exports.WebhookType = void 0;
var ActivityTimelineProjectActivityType;
(function (ActivityTimelineProjectActivityType) {
    ActivityTimelineProjectActivityType["Build"] = "BUILD";
    ActivityTimelineProjectActivityType["BuildJob"] = "BUILD_JOB";
    ActivityTimelineProjectActivityType["Submission"] = "SUBMISSION";
    ActivityTimelineProjectActivityType["Update"] = "UPDATE";
})(ActivityTimelineProjectActivityType = exports.ActivityTimelineProjectActivityType || (exports.ActivityTimelineProjectActivityType = {}));
var AndroidBuildType;
(function (AndroidBuildType) {
    AndroidBuildType["Apk"] = "APK";
    AndroidBuildType["AppBundle"] = "APP_BUNDLE";
    /** @deprecated Use developmentClient option instead. */
    AndroidBuildType["DevelopmentClient"] = "DEVELOPMENT_CLIENT";
})(AndroidBuildType = exports.AndroidBuildType || (exports.AndroidBuildType = {}));
var AndroidFcmVersion;
(function (AndroidFcmVersion) {
    AndroidFcmVersion["Legacy"] = "LEGACY";
    AndroidFcmVersion["V1"] = "V1";
})(AndroidFcmVersion = exports.AndroidFcmVersion || (exports.AndroidFcmVersion = {}));
var AndroidKeystoreType;
(function (AndroidKeystoreType) {
    AndroidKeystoreType["Jks"] = "JKS";
    AndroidKeystoreType["Pkcs12"] = "PKCS12";
    AndroidKeystoreType["Unknown"] = "UNKNOWN";
})(AndroidKeystoreType = exports.AndroidKeystoreType || (exports.AndroidKeystoreType = {}));
var AppPlatform;
(function (AppPlatform) {
    AppPlatform["Android"] = "ANDROID";
    AppPlatform["Ios"] = "IOS";
})(AppPlatform = exports.AppPlatform || (exports.AppPlatform = {}));
var AppPrivacy;
(function (AppPrivacy) {
    AppPrivacy["Hidden"] = "HIDDEN";
    AppPrivacy["Public"] = "PUBLIC";
    AppPrivacy["Unlisted"] = "UNLISTED";
})(AppPrivacy = exports.AppPrivacy || (exports.AppPrivacy = {}));
var AppSort;
(function (AppSort) {
    /** Sort by recently published */
    AppSort["RecentlyPublished"] = "RECENTLY_PUBLISHED";
    /** Sort by highest trendScore */
    AppSort["Viewed"] = "VIEWED";
})(AppSort = exports.AppSort || (exports.AppSort = {}));
var AppStoreConnectUserRole;
(function (AppStoreConnectUserRole) {
    AppStoreConnectUserRole["AccessToReports"] = "ACCESS_TO_REPORTS";
    AppStoreConnectUserRole["AccountHolder"] = "ACCOUNT_HOLDER";
    AppStoreConnectUserRole["Admin"] = "ADMIN";
    AppStoreConnectUserRole["AppManager"] = "APP_MANAGER";
    AppStoreConnectUserRole["CloudManagedAppDistribution"] = "CLOUD_MANAGED_APP_DISTRIBUTION";
    AppStoreConnectUserRole["CloudManagedDeveloperId"] = "CLOUD_MANAGED_DEVELOPER_ID";
    AppStoreConnectUserRole["CreateApps"] = "CREATE_APPS";
    AppStoreConnectUserRole["CustomerSupport"] = "CUSTOMER_SUPPORT";
    AppStoreConnectUserRole["Developer"] = "DEVELOPER";
    AppStoreConnectUserRole["Finance"] = "FINANCE";
    AppStoreConnectUserRole["ImageManager"] = "IMAGE_MANAGER";
    AppStoreConnectUserRole["Marketing"] = "MARKETING";
    AppStoreConnectUserRole["ReadOnly"] = "READ_ONLY";
    AppStoreConnectUserRole["Sales"] = "SALES";
    AppStoreConnectUserRole["Technical"] = "TECHNICAL";
    AppStoreConnectUserRole["Unknown"] = "UNKNOWN";
})(AppStoreConnectUserRole = exports.AppStoreConnectUserRole || (exports.AppStoreConnectUserRole = {}));
var AppleDeviceClass;
(function (AppleDeviceClass) {
    AppleDeviceClass["Ipad"] = "IPAD";
    AppleDeviceClass["Iphone"] = "IPHONE";
})(AppleDeviceClass = exports.AppleDeviceClass || (exports.AppleDeviceClass = {}));
var AppsFilter;
(function (AppsFilter) {
    /** Featured Projects */
    AppsFilter["Featured"] = "FEATURED";
    /** New Projects */
    AppsFilter["New"] = "NEW";
})(AppsFilter = exports.AppsFilter || (exports.AppsFilter = {}));
var AssetMetadataStatus;
(function (AssetMetadataStatus) {
    AssetMetadataStatus["DoesNotExist"] = "DOES_NOT_EXIST";
    AssetMetadataStatus["Exists"] = "EXISTS";
})(AssetMetadataStatus = exports.AssetMetadataStatus || (exports.AssetMetadataStatus = {}));
var AuthProtocolType;
(function (AuthProtocolType) {
    AuthProtocolType["Oidc"] = "OIDC";
})(AuthProtocolType = exports.AuthProtocolType || (exports.AuthProtocolType = {}));
var BuildCredentialsSource;
(function (BuildCredentialsSource) {
    BuildCredentialsSource["Local"] = "LOCAL";
    BuildCredentialsSource["Remote"] = "REMOTE";
})(BuildCredentialsSource = exports.BuildCredentialsSource || (exports.BuildCredentialsSource = {}));
var BuildIosEnterpriseProvisioning;
(function (BuildIosEnterpriseProvisioning) {
    BuildIosEnterpriseProvisioning["Adhoc"] = "ADHOC";
    BuildIosEnterpriseProvisioning["Universal"] = "UNIVERSAL";
})(BuildIosEnterpriseProvisioning = exports.BuildIosEnterpriseProvisioning || (exports.BuildIosEnterpriseProvisioning = {}));
var BuildJobLogsFormat;
(function (BuildJobLogsFormat) {
    BuildJobLogsFormat["Json"] = "JSON";
    BuildJobLogsFormat["Raw"] = "RAW";
})(BuildJobLogsFormat = exports.BuildJobLogsFormat || (exports.BuildJobLogsFormat = {}));
var BuildJobStatus;
(function (BuildJobStatus) {
    BuildJobStatus["Errored"] = "ERRORED";
    BuildJobStatus["Finished"] = "FINISHED";
    BuildJobStatus["InProgress"] = "IN_PROGRESS";
    BuildJobStatus["Pending"] = "PENDING";
    BuildJobStatus["SentToQueue"] = "SENT_TO_QUEUE";
    BuildJobStatus["Started"] = "STARTED";
})(BuildJobStatus = exports.BuildJobStatus || (exports.BuildJobStatus = {}));
var BuildPriority;
(function (BuildPriority) {
    BuildPriority["High"] = "HIGH";
    BuildPriority["Normal"] = "NORMAL";
    BuildPriority["NormalPlus"] = "NORMAL_PLUS";
})(BuildPriority = exports.BuildPriority || (exports.BuildPriority = {}));
var BuildResourceClass;
(function (BuildResourceClass) {
    BuildResourceClass["AndroidDefault"] = "ANDROID_DEFAULT";
    BuildResourceClass["AndroidLarge"] = "ANDROID_LARGE";
    BuildResourceClass["IosDefault"] = "IOS_DEFAULT";
    BuildResourceClass["IosLarge"] = "IOS_LARGE";
    BuildResourceClass["Legacy"] = "LEGACY";
})(BuildResourceClass = exports.BuildResourceClass || (exports.BuildResourceClass = {}));
var BuildStatus;
(function (BuildStatus) {
    BuildStatus["Canceled"] = "CANCELED";
    BuildStatus["Errored"] = "ERRORED";
    BuildStatus["Finished"] = "FINISHED";
    BuildStatus["InProgress"] = "IN_PROGRESS";
    BuildStatus["InQueue"] = "IN_QUEUE";
    BuildStatus["New"] = "NEW";
})(BuildStatus = exports.BuildStatus || (exports.BuildStatus = {}));
var BuildWorkflow;
(function (BuildWorkflow) {
    BuildWorkflow["Generic"] = "GENERIC";
    BuildWorkflow["Managed"] = "MANAGED";
})(BuildWorkflow = exports.BuildWorkflow || (exports.BuildWorkflow = {}));
var CacheControlScope;
(function (CacheControlScope) {
    CacheControlScope["Private"] = "PRIVATE";
    CacheControlScope["Public"] = "PUBLIC";
})(CacheControlScope = exports.CacheControlScope || (exports.CacheControlScope = {}));
var DistributionType;
(function (DistributionType) {
    DistributionType["Internal"] = "INTERNAL";
    DistributionType["Simulator"] = "SIMULATOR";
    DistributionType["Store"] = "STORE";
})(DistributionType = exports.DistributionType || (exports.DistributionType = {}));
var EasBuildDeprecationInfoType;
(function (EasBuildDeprecationInfoType) {
    EasBuildDeprecationInfoType["Internal"] = "INTERNAL";
    EasBuildDeprecationInfoType["UserFacing"] = "USER_FACING";
})(EasBuildDeprecationInfoType = exports.EasBuildDeprecationInfoType || (exports.EasBuildDeprecationInfoType = {}));
var EasServiceMetric;
(function (EasServiceMetric) {
    EasServiceMetric["AssetsRequests"] = "ASSETS_REQUESTS";
    EasServiceMetric["BandwidthUsage"] = "BANDWIDTH_USAGE";
    EasServiceMetric["Builds"] = "BUILDS";
    EasServiceMetric["ManifestRequests"] = "MANIFEST_REQUESTS";
    EasServiceMetric["UniqueUpdaters"] = "UNIQUE_UPDATERS";
    EasServiceMetric["UniqueUsers"] = "UNIQUE_USERS";
})(EasServiceMetric = exports.EasServiceMetric || (exports.EasServiceMetric = {}));
var Feature;
(function (Feature) {
    /** Priority Builds */
    Feature["Builds"] = "BUILDS";
    /** Funds support for open source development */
    Feature["OpenSource"] = "OPEN_SOURCE";
    /** Top Tier Support */
    Feature["Support"] = "SUPPORT";
    /** Share access to projects */
    Feature["Teams"] = "TEAMS";
})(Feature = exports.Feature || (exports.Feature = {}));
var InvoiceDiscountType;
(function (InvoiceDiscountType) {
    InvoiceDiscountType["Amount"] = "AMOUNT";
    InvoiceDiscountType["Percentage"] = "PERCENTAGE";
})(InvoiceDiscountType = exports.InvoiceDiscountType || (exports.InvoiceDiscountType = {}));
/** @deprecated Use developmentClient option instead. */
var IosBuildType;
(function (IosBuildType) {
    IosBuildType["DevelopmentClient"] = "DEVELOPMENT_CLIENT";
    IosBuildType["Release"] = "RELEASE";
})(IosBuildType = exports.IosBuildType || (exports.IosBuildType = {}));
var IosDistributionType;
(function (IosDistributionType) {
    IosDistributionType["AdHoc"] = "AD_HOC";
    IosDistributionType["AppStore"] = "APP_STORE";
    IosDistributionType["Development"] = "DEVELOPMENT";
    IosDistributionType["Enterprise"] = "ENTERPRISE";
})(IosDistributionType = exports.IosDistributionType || (exports.IosDistributionType = {}));
/** @deprecated Use developmentClient option instead. */
var IosManagedBuildType;
(function (IosManagedBuildType) {
    IosManagedBuildType["DevelopmentClient"] = "DEVELOPMENT_CLIENT";
    IosManagedBuildType["Release"] = "RELEASE";
})(IosManagedBuildType = exports.IosManagedBuildType || (exports.IosManagedBuildType = {}));
var IosSchemeBuildConfiguration;
(function (IosSchemeBuildConfiguration) {
    IosSchemeBuildConfiguration["Debug"] = "DEBUG";
    IosSchemeBuildConfiguration["Release"] = "RELEASE";
})(IosSchemeBuildConfiguration = exports.IosSchemeBuildConfiguration || (exports.IosSchemeBuildConfiguration = {}));
var MailchimpAudience;
(function (MailchimpAudience) {
    MailchimpAudience["ExpoDevelopers"] = "EXPO_DEVELOPERS";
})(MailchimpAudience = exports.MailchimpAudience || (exports.MailchimpAudience = {}));
var MailchimpTag;
(function (MailchimpTag) {
    MailchimpTag["DevClientUsers"] = "DEV_CLIENT_USERS";
    MailchimpTag["EasMasterList"] = "EAS_MASTER_LIST";
})(MailchimpTag = exports.MailchimpTag || (exports.MailchimpTag = {}));
var OfferType;
(function (OfferType) {
    /** Addon, or supplementary subscription */
    OfferType["Addon"] = "ADDON";
    /** Advanced Purchase of Paid Resource */
    OfferType["Prepaid"] = "PREPAID";
    /** Term subscription */
    OfferType["Subscription"] = "SUBSCRIPTION";
})(OfferType = exports.OfferType || (exports.OfferType = {}));
var Order;
(function (Order) {
    Order["Asc"] = "ASC";
    Order["Desc"] = "DESC";
})(Order = exports.Order || (exports.Order = {}));
var Permission;
(function (Permission) {
    Permission["Admin"] = "ADMIN";
    Permission["Own"] = "OWN";
    Permission["Publish"] = "PUBLISH";
    Permission["View"] = "VIEW";
})(Permission = exports.Permission || (exports.Permission = {}));
var ProjectArchiveSourceType;
(function (ProjectArchiveSourceType) {
    ProjectArchiveSourceType["S3"] = "S3";
    ProjectArchiveSourceType["Url"] = "URL";
})(ProjectArchiveSourceType = exports.ProjectArchiveSourceType || (exports.ProjectArchiveSourceType = {}));
var Role;
(function (Role) {
    Role["Admin"] = "ADMIN";
    Role["Custom"] = "CUSTOM";
    Role["Developer"] = "DEVELOPER";
    Role["HasAdmin"] = "HAS_ADMIN";
    Role["NotAdmin"] = "NOT_ADMIN";
    Role["Owner"] = "OWNER";
    Role["ViewOnly"] = "VIEW_ONLY";
})(Role = exports.Role || (exports.Role = {}));
var SecondFactorMethod;
(function (SecondFactorMethod) {
    /** Google Authenticator (TOTP) */
    SecondFactorMethod["Authenticator"] = "AUTHENTICATOR";
    /** SMS */
    SecondFactorMethod["Sms"] = "SMS";
})(SecondFactorMethod = exports.SecondFactorMethod || (exports.SecondFactorMethod = {}));
var StandardOffer;
(function (StandardOffer) {
    /** $29 USD per month, 30 day trial */
    StandardOffer["Default"] = "DEFAULT";
    /** $800 USD per month */
    StandardOffer["Support"] = "SUPPORT";
    /** $29 USD per month, 1 year trial */
    StandardOffer["YcDeals"] = "YC_DEALS";
    /** $348 USD per year, 30 day trial */
    StandardOffer["YearlySub"] = "YEARLY_SUB";
})(StandardOffer = exports.StandardOffer || (exports.StandardOffer = {}));
/** Possible Incident impact values from Expo status page API. */
var StatuspageIncidentImpact;
(function (StatuspageIncidentImpact) {
    StatuspageIncidentImpact["Critical"] = "CRITICAL";
    StatuspageIncidentImpact["Maintenance"] = "MAINTENANCE";
    StatuspageIncidentImpact["Major"] = "MAJOR";
    StatuspageIncidentImpact["Minor"] = "MINOR";
    StatuspageIncidentImpact["None"] = "NONE";
})(StatuspageIncidentImpact = exports.StatuspageIncidentImpact || (exports.StatuspageIncidentImpact = {}));
/** Possible Incident statuses from Expo status page API. */
var StatuspageIncidentStatus;
(function (StatuspageIncidentStatus) {
    StatuspageIncidentStatus["Completed"] = "COMPLETED";
    StatuspageIncidentStatus["Identified"] = "IDENTIFIED";
    StatuspageIncidentStatus["Investigating"] = "INVESTIGATING";
    StatuspageIncidentStatus["InProgress"] = "IN_PROGRESS";
    StatuspageIncidentStatus["Monitoring"] = "MONITORING";
    StatuspageIncidentStatus["Resolved"] = "RESOLVED";
    StatuspageIncidentStatus["Scheduled"] = "SCHEDULED";
    StatuspageIncidentStatus["Verifying"] = "VERIFYING";
})(StatuspageIncidentStatus = exports.StatuspageIncidentStatus || (exports.StatuspageIncidentStatus = {}));
/** Name of a service monitored by Expo status page. */
var StatuspageServiceName;
(function (StatuspageServiceName) {
    StatuspageServiceName["EasBuild"] = "EAS_BUILD";
    StatuspageServiceName["EasSubmit"] = "EAS_SUBMIT";
    StatuspageServiceName["EasUpdate"] = "EAS_UPDATE";
})(StatuspageServiceName = exports.StatuspageServiceName || (exports.StatuspageServiceName = {}));
/** Possible statuses for a service. */
var StatuspageServiceStatus;
(function (StatuspageServiceStatus) {
    StatuspageServiceStatus["DegradedPerformance"] = "DEGRADED_PERFORMANCE";
    StatuspageServiceStatus["MajorOutage"] = "MAJOR_OUTAGE";
    StatuspageServiceStatus["Operational"] = "OPERATIONAL";
    StatuspageServiceStatus["PartialOutage"] = "PARTIAL_OUTAGE";
    StatuspageServiceStatus["UnderMaintenance"] = "UNDER_MAINTENANCE";
})(StatuspageServiceStatus = exports.StatuspageServiceStatus || (exports.StatuspageServiceStatus = {}));
var SubmissionAndroidArchiveType;
(function (SubmissionAndroidArchiveType) {
    SubmissionAndroidArchiveType["Aab"] = "AAB";
    SubmissionAndroidArchiveType["Apk"] = "APK";
})(SubmissionAndroidArchiveType = exports.SubmissionAndroidArchiveType || (exports.SubmissionAndroidArchiveType = {}));
var SubmissionAndroidReleaseStatus;
(function (SubmissionAndroidReleaseStatus) {
    SubmissionAndroidReleaseStatus["Completed"] = "COMPLETED";
    SubmissionAndroidReleaseStatus["Draft"] = "DRAFT";
    SubmissionAndroidReleaseStatus["Halted"] = "HALTED";
    SubmissionAndroidReleaseStatus["InProgress"] = "IN_PROGRESS";
})(SubmissionAndroidReleaseStatus = exports.SubmissionAndroidReleaseStatus || (exports.SubmissionAndroidReleaseStatus = {}));
var SubmissionAndroidTrack;
(function (SubmissionAndroidTrack) {
    SubmissionAndroidTrack["Alpha"] = "ALPHA";
    SubmissionAndroidTrack["Beta"] = "BETA";
    SubmissionAndroidTrack["Internal"] = "INTERNAL";
    SubmissionAndroidTrack["Production"] = "PRODUCTION";
})(SubmissionAndroidTrack = exports.SubmissionAndroidTrack || (exports.SubmissionAndroidTrack = {}));
var SubmissionStatus;
(function (SubmissionStatus) {
    SubmissionStatus["AwaitingBuild"] = "AWAITING_BUILD";
    SubmissionStatus["Canceled"] = "CANCELED";
    SubmissionStatus["Errored"] = "ERRORED";
    SubmissionStatus["Finished"] = "FINISHED";
    SubmissionStatus["InProgress"] = "IN_PROGRESS";
    SubmissionStatus["InQueue"] = "IN_QUEUE";
})(SubmissionStatus = exports.SubmissionStatus || (exports.SubmissionStatus = {}));
var UploadSessionType;
(function (UploadSessionType) {
    UploadSessionType["EasBuildProjectSources"] = "EAS_BUILD_PROJECT_SOURCES";
    UploadSessionType["EasSubmitAppArchive"] = "EAS_SUBMIT_APP_ARCHIVE";
})(UploadSessionType = exports.UploadSessionType || (exports.UploadSessionType = {}));
var UsageMetricType;
(function (UsageMetricType) {
    UsageMetricType["Bandwidth"] = "BANDWIDTH";
    UsageMetricType["Build"] = "BUILD";
    UsageMetricType["Request"] = "REQUEST";
    UsageMetricType["Update"] = "UPDATE";
    UsageMetricType["User"] = "USER";
})(UsageMetricType = exports.UsageMetricType || (exports.UsageMetricType = {}));
var UsageMetricsGranularity;
(function (UsageMetricsGranularity) {
    UsageMetricsGranularity["Day"] = "DAY";
    UsageMetricsGranularity["Hour"] = "HOUR";
    UsageMetricsGranularity["Minute"] = "MINUTE";
    UsageMetricsGranularity["Total"] = "TOTAL";
})(UsageMetricsGranularity = exports.UsageMetricsGranularity || (exports.UsageMetricsGranularity = {}));
var WebhookType;
(function (WebhookType) {
    WebhookType["Build"] = "BUILD";
    WebhookType["Submit"] = "SUBMIT";
})(WebhookType = exports.WebhookType || (exports.WebhookType = {}));
