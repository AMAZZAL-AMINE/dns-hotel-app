"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const queries_1 = require("../../branch/queries");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const pagination_1 = require("../../commandUtils/pagination");
const expoConfig_1 = require("../../project/expoConfig");
const projectUtils_1 = require("../../project/projectUtils");
const queries_2 = require("../../update/queries");
const json_1 = require("../../utils/json");
class BranchView extends EasCommand_1.default {
    async runAsync() {
        let { args: { name: branchName }, flags, } = await this.parse(BranchView);
        const options = (0, pagination_1.getPaginatedQueryOptions)(flags);
        if (options.json) {
            (0, json_1.enableJsonOutput)();
        }
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const exp = (0, expoConfig_1.getExpoConfig)(projectDir);
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        // provide help to a user if they ran the command with missing args
        if (!branchName) {
            if (options.nonInteractive) {
                throw new Error('Branch name may not be empty.');
            }
            ({ name: branchName } = await (0, queries_1.selectBranchFromPaginatedQueryAsync)(projectId, 'Which branch would you like to view?', 
            // discard limit and offset because this query is not those flag's intended target
            { json: options.json, nonInteractive: options.nonInteractive, offset: 0 }));
        }
        await (0, queries_2.listAndRenderUpdatesOnBranchByNameAsync)(projectId, branchName, options);
    }
}
exports.default = BranchView;
BranchView.description = 'view a branch';
BranchView.args = [
    {
        name: 'name',
        required: false,
        description: 'Name of the branch to view',
    },
];
BranchView.flags = {
    ...pagination_1.EasPaginatedQueryFlags,
};
