"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const path_1 = tslib_1.__importDefault(require("path"));
const configure_1 = require("../../build/configure");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const context_1 = require("../../credentials/context");
const log_1 = tslib_1.__importStar(require("../../log"));
const context_2 = require("../../metadata/context");
const download_1 = require("../../metadata/download");
const errors_1 = require("../../metadata/errors");
const projectUtils_1 = require("../../project/projectUtils");
const actions_1 = require("../../user/actions");
class MetadataPull extends EasCommand_1.default {
    async runAsync() {
        log_1.default.warn('EAS Metadata is in beta and subject to breaking changes.');
        const { flags } = await this.parse(MetadataPull);
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, { skipSDKVersionRequirement: true });
        await (0, projectUtils_1.getProjectIdAsync)(exp);
        await (0, configure_1.ensureProjectConfiguredAsync)({ projectDir, nonInteractive: false });
        const credentialsCtx = new context_1.CredentialsContext({
            exp,
            projectDir,
            user: await (0, actions_1.ensureLoggedInAsync)(),
            nonInteractive: false,
        });
        const metadataCtx = await (0, context_2.createMetadataContextAsync)({
            credentialsCtx,
            projectDir,
            exp,
            profileName: flags.profile,
        });
        try {
            const filePath = await (0, download_1.downloadMetadataAsync)(metadataCtx);
            const relativePath = path_1.default.relative(process.cwd(), filePath);
            log_1.default.addNewLineIfNone();
            log_1.default.log(`ðŸŽ‰ Your store config is ready.

- Update the ${chalk_1.default.bold(relativePath)} file to prepare the app information.
- Run ${chalk_1.default.bold('eas submit')} or manually upload a new app version to the app stores.
- Once the app is uploaded, run ${chalk_1.default.bold('eas metadata:push')} to sync the store config.
- ${(0, log_1.learnMore)('https://docs.expo.dev/eas-metadata/introduction/')}`);
        }
        catch (error) {
            (0, errors_1.handleMetadataError)(error);
        }
    }
}
exports.default = MetadataPull;
MetadataPull.description = 'generate the local store configuration from the app stores';
MetadataPull.flags = {
    profile: core_1.Flags.string({
        description: 'Name of the submit profile from eas.json. Defaults to "production" if defined in eas.json.',
    }),
};
