"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Updates_1 = require("@expo/config-plugins/build/utils/Updates");
const eas_build_job_1 = require("@expo/eas-build-job");
const eas_json_1 = require("@expo/eas-json");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const EasCommand_1 = tslib_1.__importDefault(require("../../../commandUtils/EasCommand"));
const AppVersionMutation_1 = require("../../../graphql/mutations/AppVersionMutation");
const AppVersionQuery_1 = require("../../../graphql/queries/AppVersionQuery");
const AppPlatform_1 = require("../../../graphql/types/AppPlatform");
const log_1 = tslib_1.__importDefault(require("../../../log"));
const platform_1 = require("../../../platform");
const versions_1 = require("../../../project/android/versions");
const applicationIdentifier_1 = require("../../../project/applicationIdentifier");
const expoConfig_1 = require("../../../project/expoConfig");
const versions_2 = require("../../../project/ios/versions");
const projectUtils_1 = require("../../../project/projectUtils");
const remoteVersionSource_1 = require("../../../project/remoteVersionSource");
const prompts_1 = require("../../../prompts");
class BuildVersionSetView extends EasCommand_1.default {
    async runAsync() {
        var _a, _b, _c;
        const { flags } = await this.parse(BuildVersionSetView);
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const platform = await (0, platform_1.selectPlatformAsync)(flags.platform);
        const easJsonReader = new eas_json_1.EasJsonReader(projectDir);
        await (0, remoteVersionSource_1.ensureVersionSourceIsRemoteAsync)(projectDir, easJsonReader);
        const profile = await easJsonReader.getBuildProfileAsync(platform, (_a = flags.profile) !== null && _a !== void 0 ? _a : undefined);
        const exp = (0, expoConfig_1.getExpoConfig)(projectDir, { env: profile.env });
        const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
        const projectFullName = await (0, projectUtils_1.getProjectFullNameAsync)(exp);
        (0, remoteVersionSource_1.validateAppConfigForRemoteVersionSource)(exp, platform);
        const applicationIdentifier = await (0, applicationIdentifier_1.getApplicationIdentifierAsync)(projectDir, exp, profile, platform);
        const remoteVersions = await AppVersionQuery_1.AppVersionQuery.latestVersionAsync(projectId, (0, AppPlatform_1.toAppPlatform)(platform), applicationIdentifier);
        const currentStateMessage = (remoteVersions === null || remoteVersions === void 0 ? void 0 : remoteVersions.buildVersion)
            ? `Project ${chalk_1.default.bold(projectFullName)} with ${getApplicationIdentifierName(platform)} "${applicationIdentifier}" is configured with ${(0, remoteVersionSource_1.getBuildVersionName)(platform)} ${remoteVersions.buildVersion}.`
            : `Project ${chalk_1.default.bold(projectFullName)} with ${getApplicationIdentifierName(platform)} "${applicationIdentifier}" does not have any ${(0, remoteVersionSource_1.getBuildVersionName)(platform)} configured.`;
        const versionPromptMessage = (remoteVersions === null || remoteVersions === void 0 ? void 0 : remoteVersions.buildVersion)
            ? `What version would you like to set?`
            : `What version would you like to initialize it with?`;
        log_1.default.log(currentStateMessage);
        const { version } = await (0, prompts_1.promptAsync)({
            type: platform === eas_build_job_1.Platform.ANDROID ? 'number' : 'text',
            name: 'version',
            message: versionPromptMessage,
            validate: platform === eas_build_job_1.Platform.ANDROID
                ? value => (0, versions_1.isValidVersionCode)(value) || `Invalid value: ${versions_1.VERSION_CODE_REQUIREMENTS}.`
                : value => (0, versions_2.isValidBuildNumber)(value) || `Invalid value: ${versions_2.BUILD_NUMBER_REQUIREMENTS}.`,
        });
        await AppVersionMutation_1.AppVersionMutation.createAppVersionAsync({
            appId: projectId,
            platform: (0, AppPlatform_1.toAppPlatform)(platform),
            applicationIdentifier,
            storeVersion: (_b = exp.version) !== null && _b !== void 0 ? _b : '1.0.0',
            buildVersion: String(version),
            runtimeVersion: (_c = (0, Updates_1.getRuntimeVersionNullable)(exp, platform)) !== null && _c !== void 0 ? _c : undefined,
        });
    }
}
exports.default = BuildVersionSetView;
BuildVersionSetView.description = 'Update version of an app.';
BuildVersionSetView.flags = {
    platform: core_1.Flags.enum({
        char: 'p',
        options: ['android', 'ios'],
    }),
    profile: core_1.Flags.string({
        description: 'Name of the build profile from eas.json. Defaults to "production" if defined in eas.json.',
        helpValue: 'PROFILE_NAME',
    }),
};
function getApplicationIdentifierName(platform) {
    if (platform === eas_build_job_1.Platform.ANDROID) {
        return 'application ID';
    }
    else {
        return 'bundle identifier';
    }
}
