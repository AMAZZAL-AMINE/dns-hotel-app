"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EasPaginatedQueryFlags = exports.getPaginatedQueryOptions = void 0;
const core_1 = require("@oclif/core");
const getPaginatedQueryOptions = (flags) => {
    var _a, _b, _c;
    return {
        json: (_a = flags.json) !== null && _a !== void 0 ? _a : false,
        offset: (_b = flags.offset) !== null && _b !== void 0 ? _b : 0,
        nonInteractive: (_c = flags['non-interactive']) !== null && _c !== void 0 ? _c : false,
        ...('limit' in flags && { limit: flags.limit }),
    };
};
exports.getPaginatedQueryOptions = getPaginatedQueryOptions;
const parseFlagInputStringAsInteger = (input, flagName, lowerLimit, upperLimit) => {
    const inputAsNumber = Number(input);
    if (isNaN(inputAsNumber)) {
        throw new Error(`Unable to parse ${input} as a number`);
    }
    if (inputAsNumber < lowerLimit || inputAsNumber > upperLimit) {
        throw new Error(`--${flagName} must be between ${lowerLimit} and ${upperLimit}`);
    }
    return inputAsNumber;
};
exports.EasPaginatedQueryFlags = {
    offset: core_1.Flags.integer({
        description: 'Start queries from specified index. Use for paginating results. Defaults to 0.',
        // eslint-disable-next-line async-protect/async-suffix
        parse: async (input) => parseFlagInputStringAsInteger(input, 'offset', 0, Number.MAX_SAFE_INTEGER),
    }),
    limit: core_1.Flags.integer({
        description: 'The number of query items to list at once. The default value is 50 (the maximum is 100). Using a lower value may help increase command speed.',
        // eslint-disable-next-line async-protect/async-suffix
        parse: async (input) => parseFlagInputStringAsInteger(input, 'limit', 1, 100),
    }),
    json: core_1.Flags.boolean({
        description: 'Enable JSON output, non-JSON messages will be printed to stderr.',
    }),
    'non-interactive': core_1.Flags.boolean({
        description: 'Run the command in non-interactive mode.',
    }),
};
