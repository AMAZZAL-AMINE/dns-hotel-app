"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApplicationIdentifierAsync = void 0;
const eas_build_job_1 = require("@expo/eas-build-job");
const applicationId_1 = require("./android/applicationId");
const gradle_1 = require("./android/gradle");
const bundleIdentifier_1 = require("./ios/bundleIdentifier");
const scheme_1 = require("./ios/scheme");
const target_1 = require("./ios/target");
const workflow_1 = require("./workflow");
async function getApplicationIdentifierAsync(projectDir, exp, buildProfile, platform) {
    if (platform === eas_build_job_1.Platform.ANDROID) {
        const profile = buildProfile;
        const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.ANDROID);
        const gradleContext = await (0, gradle_1.resolveGradleBuildContextAsync)(projectDir, profile);
        if (workflow === eas_build_job_1.Workflow.MANAGED) {
            await (0, applicationId_1.ensureApplicationIdIsDefinedForManagedProjectAsync)(projectDir, exp);
        }
        return await (0, applicationId_1.getApplicationIdAsync)(projectDir, exp, gradleContext);
    }
    else {
        const profile = buildProfile;
        const xcodeBuildContext = await (0, scheme_1.resolveXcodeBuildContextAsync)({ exp, projectDir, nonInteractive: false }, profile);
        const targets = await (0, target_1.resolveTargetsAsync)({
            projectDir,
            exp,
            xcodeBuildContext,
            env: profile.env,
        });
        const applicationTarget = (0, target_1.findApplicationTarget)(targets);
        return await (0, bundleIdentifier_1.getBundleIdentifierAsync)(projectDir, exp, {
            targetName: applicationTarget.targetName,
            buildConfiguration: applicationTarget.buildConfiguration,
        });
    }
}
exports.getApplicationIdentifierAsync = getApplicationIdentifierAsync;
