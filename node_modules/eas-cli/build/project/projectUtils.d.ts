import { ExpoConfig } from '@expo/config';
import { Env } from '@expo/eas-build-job';
import { Actor } from '../user/User';
export declare function getProjectAccountName(exp: ExpoConfig, user: Actor): string;
export declare function getUsername(exp: ExpoConfig, user: Actor): string | undefined;
export declare function getProjectAccountNameAsync(exp: ExpoConfig): Promise<string>;
export declare function findProjectRootAsync({ cwd, defaultToProcessCwd, }?: {
    cwd?: string;
    defaultToProcessCwd?: boolean;
}): Promise<string>;
/**
 * Save an EAS project ID to the appropriate field in the app config.
 */
export declare function saveProjectIdToAppConfigAsync(projectDir: string, projectId: string, options?: {
    env?: Env;
}): Promise<void>;
/**
 * Use the owner/slug to identify an EAS project on the server.
 *
 * @returns the EAS project ID from the server
 */
export declare function fetchProjectIdFromServerAsync(exp: ExpoConfig): Promise<string>;
/**
 * Get the EAS project ID from the app config. If the project ID is not set in the config.
 * use the owner/slug to identify an EAS project on the server, and attempt to save the
 * EAS project ID to the appropriate field in the app config.
 */
export declare function getProjectIdAsync(exp: ExpoConfig, options?: {
    env?: Env;
}, findProjectRootOptions?: {
    cwd?: string;
    defaultToProcessCwd?: boolean;
}): Promise<string>;
export declare function getProjectFullNameAsync(exp: ExpoConfig): Promise<string>;
/**
 * Return a useful name describing the project config.
 * - dynamic: app.config.js
 * - static: app.json
 * - custom path app config relative to root folder
 * - both: app.config.js or app.json
 */
export declare function getProjectConfigDescription(projectDir: string): string;
export declare function isExpoUpdatesInstalled(projectDir: string): boolean;
export declare function isExpoUpdatesInstalledOrAvailable(projectDir: string, sdkVersion?: string): boolean;
export declare function validateAppVersionRuntimePolicySupportAsync(projectDir: string, exp: ExpoConfig): Promise<void>;
export declare function installExpoUpdatesAsync(projectDir: string): Promise<void>;
